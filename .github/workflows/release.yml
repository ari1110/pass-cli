name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  test:
    name: Test Before Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'
          cache: true

      - name: Run unit tests
        run: go test -v -race ./...

      - name: Run integration tests
        run: go test -v -tags=integration -timeout 5m ./test

  lint:
    name: Lint Before Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: v2.5
          args: --timeout=5m

  security:
    name: Security Scan Before Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'
          cache: true

      - name: Run Gosec Security Scanner
        uses: securego/gosec@master
        with:
          args: './...'

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [test, lint, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'
          cache: true

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: latest
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt
          retention-days: 30

  verify-release:
    name: Verify Release
    runs-on: ${{ matrix.os }}
    needs: release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: ./artifacts

      - name: Display artifacts
        run: ls -R ./artifacts
        shell: bash

      - name: Verify checksums (Unix)
        if: runner.os != 'Windows'
        run: |
          cd artifacts
          sha256sum -c checksums.txt || echo "Some files missing in artifacts (expected)"

      - name: Test binary extraction (Unix)
        if: runner.os != 'Windows'
        run: |
          cd artifacts
          # Find the appropriate archive for this platform
          if [ "$RUNNER_OS" == "Linux" ]; then
            ARCHIVE=$(ls *linux*.tar.gz | head -1)
          elif [ "$RUNNER_OS" == "macOS" ]; then
            ARCHIVE=$(ls *darwin*.tar.gz | head -1)
          fi
          if [ -n "$ARCHIVE" ]; then
            tar -xzf "$ARCHIVE"
            ./pass-cli version || echo "Binary test completed"
          fi

      - name: Test binary extraction (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          cd artifacts
          $archive = Get-ChildItem -Filter "*windows*.zip" | Select-Object -First 1
          if ($archive) {
            Expand-Archive -Path $archive.FullName -DestinationPath .
            .\pass-cli.exe version
          }
