{
  "id": "snapshot_1759099090258_pufaqwxr1",
  "approvalId": "approval_1759099090231_gehibmiqn",
  "approvalTitle": "Project structure document for pass-cli",
  "version": 1,
  "timestamp": "2025-09-28T22:38:10.258Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Project Structure\n\n## Directory Organization\n\n```\npass-cli/\n├── main.go                     # Application entry point\n├── cmd/                        # CLI commands (Cobra)\n│   ├── root.go                 # Root command and global flags\n│   ├── init.go                 # Initialize vault command\n│   ├── add.go                  # Add credential command\n│   ├── get.go                  # Retrieve credential command\n│   ├── list.go                 # List credentials command\n│   ├── update.go               # Update credential command\n│   ├── delete.go               # Delete credential command\n│   └── generate.go             # Generate password command\n├── internal/                   # Private application code\n│   ├── crypto/                 # Encryption/decryption layer\n│   │   ├── crypto.go           # AES-256-GCM implementation\n│   │   └── crypto_test.go      # Crypto unit tests\n│   ├── storage/                # File storage layer\n│   │   ├── storage.go          # Vault file operations\n│   │   └── storage_test.go     # Storage unit tests\n│   ├── keychain/               # System keychain integration\n│   │   ├── keychain.go         # Cross-platform keychain access\n│   │   └── keychain_test.go    # Keychain unit tests\n│   └── vault/                  # Business logic layer\n│       ├── vault.go            # Credential management logic\n│       ├── vault_test.go       # Vault unit tests\n│       └── types.go            # Data structures and types\n├── test/                       # Integration and end-to-end tests\n│   ├── integration_test.go     # Full workflow tests\n│   └── helpers.go              # Test utilities and fixtures\n├── docs/                       # Project documentation\n│   ├── installation.md         # Installation instructions\n│   ├── usage.md                # Usage guide and examples\n│   └── security.md             # Security design and threat model\n├── scripts/                    # Build and utility scripts\n│   ├── build.sh                # Cross-platform build script\n│   └── test.sh                 # Comprehensive test runner\n├── .spec-workflow/             # Specification and workflow files\n│   ├── steering/               # Project steering documents\n│   └── specs/                  # Feature specifications\n├── Makefile                    # Build targets and automation\n├── go.mod                      # Go module definition\n├── go.sum                      # Dependency checksums\n├── .gitignore                  # Git ignore patterns\n└── README.md                   # Project overview and quick start\n```\n\n## Naming Conventions\n\n### Files\n- **Commands**: `snake_case.go` (e.g., `add.go`, `generate.go`)\n- **Packages**: `lowercase` single word (e.g., `crypto`, `storage`, `keychain`)\n- **Internal modules**: `lowercase.go` (e.g., `vault.go`, `types.go`)\n- **Tests**: `[filename]_test.go` (e.g., `crypto_test.go`, `vault_test.go`)\n\n### Code\n- **Types/Structs**: `PascalCase` (e.g., `Credential`, `EncryptedVault`)\n- **Functions/Methods**: `PascalCase` for public, `camelCase` for private (e.g., `AddCredential`, `encryptData`)\n- **Constants**: `PascalCase` (e.g., `DefaultVaultPath`, `MinPasswordLength`)\n- **Variables**: `camelCase` (e.g., `masterPassword`, `vaultData`)\n\n## Import Patterns\n\n### Import Order\n1. **Standard library**: `crypto/aes`, `encoding/json`, `os`, `path/filepath`\n2. **External dependencies**: `github.com/spf13/cobra`, `github.com/zalando/go-keyring`\n3. **Internal packages**: `pass-cli/internal/crypto`, `pass-cli/internal/storage`\n\n### Module/Package Organization\n```go\n// Standard library imports\nimport (\n    \"crypto/aes\"\n    \"encoding/json\"\n    \"os\"\n)\n\n// External dependencies\nimport (\n    \"github.com/spf13/cobra\"\n    \"github.com/zalando/go-keyring\"\n)\n\n// Internal packages\nimport (\n    \"pass-cli/internal/crypto\"\n    \"pass-cli/internal/vault\"\n)\n```\n\n## Code Structure Patterns\n\n### Module/Package Organization\n```go\n// Package declaration and imports\npackage crypto\n\nimport (...)\n\n// Constants and configuration\nconst (\n    KeyLength = 32\n    NonceLength = 12\n)\n\n// Type definitions\ntype CryptoService struct {\n    // fields\n}\n\n// Public API functions\nfunc NewCryptoService() *CryptoService { ... }\nfunc (c *CryptoService) Encrypt(data []byte) ([]byte, error) { ... }\n\n// Private helper functions\nfunc deriveKey(password string, salt []byte) []byte { ... }\n```\n\n### Function/Method Organization\n```go\nfunc (v *Vault) AddCredential(service, username, value string) error {\n    // Input validation\n    if service == \"\" {\n        return ErrEmptyService\n    }\n\n    // Core logic\n    credential := Credential{\n        Service:   service,\n        Username:  username,\n        Value:     value,\n        CreatedAt: time.Now(),\n    }\n\n    // Error handling and persistence\n    if err := v.storage.Save(credential); err != nil {\n        return fmt.Errorf(\"failed to save credential: %w\", err)\n    }\n\n    return nil\n}\n```\n\n### File Organization Principles\n- **One primary type per file**: Each file focuses on a single main struct or concept\n- **Related functionality grouped**: Helper functions stay close to primary implementations\n- **Public API first**: Exported functions and types at the top of files\n- **Private implementation last**: Internal helpers and utilities at the bottom\n\n## Code Organization Principles\n\n1. **Single Responsibility**: Each package handles one domain (crypto, storage, keychain)\n2. **Modularity**: Clear interfaces between layers enable testing and maintainability\n3. **Testability**: Dependency injection and interfaces support comprehensive testing\n4. **Consistency**: Follow established Go idioms and project patterns\n\n## Module Boundaries\n\n### Dependency Direction\n```\nCLI Commands (cmd/)\n    ↓\nBusiness Logic (internal/vault/)\n    ↓\nService Layers (internal/crypto/, internal/storage/, internal/keychain/)\n    ↓\nStandard Library & External Dependencies\n```\n\n### Boundary Patterns\n- **Public API vs Internal**: `cmd/` packages expose CLI interface, `internal/` packages are implementation details\n- **Core vs Platform-specific**: Core crypto and vault logic is cross-platform, keychain integration handles OS differences\n- **Stable vs Experimental**: Main packages are stable, future plugin system would be experimental\n- **Dependencies direction**: Higher layers depend on lower layers, never vice versa\n\n## Code Size Guidelines\n\n**Suggested Guidelines:**\n- **File size**: Maximum 500 lines per file (excluding tests)\n- **Function/Method size**: Maximum 50 lines per function, prefer 10-20 lines\n- **Struct complexity**: Maximum 10 fields per struct, consider composition for larger types\n- **Nesting depth**: Maximum 4 levels of nesting, extract functions for complex logic\n\n## Security Structure\n\n### Sensitive Data Handling\n```\nVault Layer: Plain text credentials (in memory only)\n    ↓\nCrypto Layer: Encryption/decryption operations\n    ↓\nStorage Layer: Encrypted data persistence\n    ↓\nFile System: Encrypted files with secure permissions\n```\n\n### Security Boundaries\n- **Memory management**: Clear sensitive data from memory after use\n- **File permissions**: Vault files created with 600 permissions (user-only access)\n- **Key derivation**: Master passwords never stored, only derived keys with salt\n- **Error handling**: Security-sensitive errors don't leak implementation details\n\n## Testing Structure\n\n### Test Organization\n```\nUnit Tests: *_test.go files alongside source code\nIntegration Tests: test/ directory for cross-component testing\nTest Utilities: test/helpers.go for shared test infrastructure\n```\n\n### Test Patterns\n- **Table-driven tests**: Standard Go pattern for multiple test cases\n- **Dependency injection**: Mock interfaces for external dependencies (keychain, filesystem)\n- **Test fixtures**: Predefined data for consistent test scenarios\n- **Cleanup**: Proper cleanup of test files and sensitive data\n\n## Documentation Standards\n\n- **Public APIs**: All exported functions and types have Go doc comments\n- **Complex logic**: Inline comments for cryptographic operations and security decisions\n- **Package documentation**: Each package has comprehensive package-level documentation\n- **README files**: Usage examples and getting started guide in project root\n- **Security documentation**: Dedicated security.md explaining threat model and design decisions",
  "fileStats": {
    "size": 8620,
    "lines": 227,
    "lastModified": "2025-09-28T22:38:01.807Z"
  },
  "comments": []
}