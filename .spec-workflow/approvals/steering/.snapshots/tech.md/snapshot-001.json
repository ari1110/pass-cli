{
  "id": "snapshot_1759098966621_m9hztyce2",
  "approvalId": "approval_1759098966588_9pzgv5l1w",
  "approvalTitle": "Technology stack document for pass-cli",
  "version": 1,
  "timestamp": "2025-09-28T22:36:06.621Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# Technology Stack\n\n## Project Type\nCommand-line interface (CLI) tool for secure credential management. Single-binary application designed for local development environments with cross-platform compatibility.\n\n## Core Technologies\n\n### Primary Language(s)\n- **Language**: Go 1.21+ (modern Go with enhanced security features)\n- **Runtime/Compiler**: Go compiler with CGO disabled for static linking\n- **Language-specific tools**: Go modules for dependency management, built-in toolchain for cross-compilation\n\n### Key Dependencies/Libraries\n- **github.com/spf13/cobra v1.10.1**: CLI framework and command management\n- **github.com/spf13/viper v1.21.0**: Configuration management and file handling\n- **github.com/zalando/go-keyring v0.2.6**: Cross-platform system keychain integration\n- **golang.org/x/crypto v0.42.0**: Extended cryptographic functions (PBKDF2)\n- **Standard library crypto packages**: AES-256-GCM implementation, secure random generation\n\n### Application Architecture\nLayered architecture with clear separation of concerns:\n- **CLI Layer**: Command interface using Cobra framework\n- **Service Layer**: Business logic for credential management (Vault service)\n- **Storage Layer**: Encrypted file operations and persistence\n- **Crypto Layer**: AES-256-GCM encryption and key derivation\n- **Keychain Layer**: System integration for master password storage\n\n### Data Storage (if applicable)\n- **Primary storage**: Local encrypted JSON files in user home directory (`~/.pass-cli/vault.enc`)\n- **Caching**: In-memory vault cache during active sessions\n- **Data formats**: JSON for structured data, binary for encrypted blobs\n- **Backup strategy**: Atomic writes with temporary files for corruption prevention\n\n### External Integrations (if applicable)\n- **System Keychains**: Windows Credential Manager, macOS Keychain, Linux Secret Service\n- **Clipboard**: Cross-platform clipboard integration for credential copying\n- **File System**: Secure file permissions (600) for vault storage\n\n## Development Environment\n\n### Build & Development Tools\n- **Build System**: Go toolchain with custom Makefile for cross-compilation\n- **Package Management**: Go modules with dependency pinning for reproducible builds\n- **Development workflow**: Live reload via `go run`, integrated testing with `go test`\n- **Cross-compilation**: Native Go support for Windows, macOS, Linux (amd64, arm64)\n\n### Code Quality Tools\n- **Static Analysis**: golangci-lint v2.5.0 (comprehensive linter suite)\n- **Formatting**: goimports (automatic import management and code formatting)\n- **Testing Framework**: Go's built-in testing package with table-driven tests\n- **Documentation**: Go doc comments and README.md with usage examples\n\n### Version Control & Collaboration\n- **VCS**: Git with conventional commit messages\n- **Branching Strategy**: GitHub Flow with feature branches and pull requests\n- **Code Review Process**: Required reviews for main branch, automated CI checks\n\n## Deployment & Distribution\n- **Target Platform(s)**: Windows 10+, macOS 10.15+, Linux distributions with glibc 2.17+\n- **Distribution Method**:\n  - GitHub Releases with automated binary builds\n  - Homebrew formula for macOS/Linux\n  - Scoop manifest for Windows\n  - Direct binary download\n- **Installation Requirements**: No runtime dependencies (static binary)\n- **Update Mechanism**: Package manager updates, manual binary replacement\n\n## Technical Requirements & Constraints\n\n### Performance Requirements\n- **Startup time**: <100ms for cached operations\n- **Memory usage**: <50MB during normal operations\n- **Response time**: <500ms for all credential operations\n- **Binary size**: <20MB for cross-platform compatibility\n\n### Compatibility Requirements\n- **Platform Support**: Windows (amd64, arm64), macOS (amd64, arm64), Linux (amd64, arm64)\n- **Go Version**: Minimum Go 1.21 for security and performance features\n- **Standards Compliance**: NIST encryption standards, OWASP secure coding practices\n\n### Security & Compliance\n- **Encryption**: AES-256-GCM with cryptographically secure key derivation (PBKDF2, 100k+ iterations)\n- **Key Management**: Never store master passwords in plaintext, secure memory clearing\n- **File Permissions**: Vault files created with 600 permissions (user read/write only)\n- **Threat Model**: Protection against local file access, memory dumps, and weak passwords\n\n### Scalability & Reliability\n- **Expected Load**: Single-user, local operations with hundreds of credentials\n- **Availability**: Offline-first design, no network dependencies\n- **Vault Size**: Efficient handling of vaults up to 10MB (thousands of credentials)\n\n## Technical Decisions & Rationale\n\n### Decision Log\n1. **Go Language Selection**:\n   - Strong cryptography standard library\n   - Excellent cross-compilation support\n   - Single binary distribution simplicity\n   - Memory safety and performance\n\n2. **AES-256-GCM Encryption**:\n   - NIST recommended authenticated encryption\n   - Built-in integrity verification\n   - Resistance to padding oracle attacks\n   - Standard library implementation\n\n3. **Cobra CLI Framework**:\n   - Industry standard (used by kubectl, docker, gh)\n   - Excellent help system and command organization\n   - Automatic completion and validation\n   - Consistent with Go ecosystem tools\n\n4. **Local File Storage**:\n   - Offline-first approach for privacy\n   - No cloud dependencies or attack surface\n   - User control over data location\n   - Simple backup and migration\n\n5. **System Keychain Integration**:\n   - Native OS credential storage when available\n   - Graceful fallback to password prompts\n   - Enhanced user experience for daily workflows\n   - OS-level security protections\n\n## Known Limitations\n\n- **Multi-user Support**: Single-user design, no concurrent access protection\n- **Sync Capabilities**: No built-in synchronization across devices (future enhancement)\n- **Audit Logging**: Basic operation logging only, no comprehensive audit trail\n- **Plugin System**: Monolithic design, no extensibility via plugins (acceptable for v1.0)",
  "fileStats": {
    "size": 6032,
    "lines": 130,
    "lastModified": "2025-09-28T22:35:59.486Z"
  },
  "comments": []
}